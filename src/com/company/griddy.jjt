options {
    OUTPUT_DIRECTORY = "src/com/company";
    MULTI = true;
    NODE_PACKAGE = "com.company.parser";
    JJTREE_OUTPUT_DIRECTORY = "src/com/company/parser";
    VISITOR = true;
    LOOKAHEAD = 1;
    NODE_DEFAULT_VOID = true;
    STATIC = false;
    VISITOR_DATA_TYPE = "StringBuilder";
    VISITOR_RETURN_TYPE = "StringBuilder";
}

PARSER_BEGIN(Griddy)
package com.company;

import java.io.InputStream;
import java.util.HashMap;
import java.util.LinkedHashMap;
import com.company.parser.GriddyVisitor;

public class Griddy {
    public static void main(boolean tree, InputStream input, StringBuilder output) {
        Griddy parser = new Griddy(input);

        try {
            ASTStart n = parser.Start();
            if (tree) n.dump("");
            else {
                GriddyVisitor v = new Visitor();
                n.jjtAccept(v, output);
            }
        } catch (Exception e) {
            System.out.println("An error occurred.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}
PARSER_END(Griddy)

/* Whitespace characters */
SKIP : {
        < WHITE_SPACE:  <TAB> | <NEWLINE> | <SP>    >
    |   < #SP:   " "     >
    |   < #TAB:  "\t"    >
}

/* Comments */
SPECIAL_TOKEN : {
        <SINGLE_LINE_COMMENT:   "#" (~["\n","\r"])* <NEWLINE>   >
    |   < NEWLINE:  "\n" | "\r" | "\r\n"    >   // line endings
}

/* Reserved keywords */
TOKEN : {
        < IF:   "if"    >   // if statement
    |   < ELSE: "else"  >   // else statement
    |   < FROM: "from"  >   // get piece 'from' player 'piece from @player1'
    |   < IN:   "in"    >   // e.g. 'for x in iterable'
    |   < FOR:  "for"   >   // for loop begin
    |   < END:  "end"   >   // block end
    |   < OUTPUT: "output"  >   // prints the output
    |   < INPUT: "input"    >   // scans the user input
    |   < GAME_MAIN:    "GAME"  >   // game phase begin
    |   < FUNC_DECL:    "fun"   >   // function return
    |   < RETURN:   "return"    >   // function return statement
    |   < BOARD_DECL:   "board" >   // board declaration token, e.g. 'board (n,m)'
    |   < PIECE_DECL:   "piece" >   // game piece declaration token, e.g. 'piece { ...props }'
    |   < PLACE: "place"    >   // place pieces on a board
    |   < TILE: "tile"  >
    |   < IS_EMPTY: "empty?"    >
}

/* Punctuators */
TOKEN : {
        < EQ:   "=="    >   // equal
    |   < NEQ:  "!="    >   // 'not equal'
    |   < GEQ:  ">="    >   // 'greater than or equal to'
    |   < LEQ:  "<="    >   // 'less than or equal to'
    |   < NOT:  "!"     >   // 'not' / 'negate'
    |   < LT:   "<"     >   // 'less than'
    |   < GT:   ">"     >   // 'greater than'
    |   < AND:  "and"    >   // logical 'and'
    |   < OR:   "or"    >   // logical 'or'
    |   < PLUS: "+"     >   // addition
    |   < MINUS:"-"     >   // subtraction
    |   < MULT: "*"     >   // multiplication
    |   < DIV:  "/"     >   // division
    |   < MOD:  "%"     >   // modulus
    |   < ASSIGN: "="   >   // variable assigment
    |   < COMMA:    "," >   // seperator comma
    |   < SEMICOLON: ";">   // statement endings
    |   < COLON:    ":" >   // property assignment
    |   < LPAREN:   "(" >   // left parenthesis
    |   < RPAREN:   ")" >   // right parenthesis
    |   < LBRACE:   "{" >   // left curly bracket
    |   < RBRACE:   "}" >   // right curly bracket
    |   < LBRACKET: "[" >   // left square bracket
    |   < RBRACKET: "]" >   // right square bracket
}

/* Literals (terminals) */
TOKEN : {
        < NUM:  ["0"-"9"] | ["1"-"9"] (["0"-"9"])+  >
    |   < BOOL: "true" | "false"    >
    |   < NEG_NUM:  "-" <NUM>   >
    |   < STRING:  "\"" (~["\"","\r","\n"])* "\"" > // string literal
}

/* Identifier (terminals) */
TOKEN : {
        < IDENT:        (<LETTER> | "@") (<IDENT_PART>)* >
    |   < #IDENT_PART:  (<LETTER> | "_")+ >
    |   < #LETTER:      ["a"-"z","A"-"Z"] >
}

ASTStart Start() #Start : {}
{
    setupPhase()
    gamePhase()
    <EOF>
    { return jjtThis; }
}

void setupPhase() : {}
{
    ( setupStmt() )*
}

void setupStmt() : {}
{
        functionDeclaration()
    |   pieceDeclaration()
    |   assignment() <SEMICOLON>
    |   boardDeclaration() <SEMICOLON>
}

void gamePhase() #Game : {}
{
    <GAME_MAIN> <LPAREN> expression() <RPAREN>
    ( gameStmt() )*
}

void gameStmt() : {}
{
        LOOKAHEAD( functionCall() )
        ( functionCall() <SEMICOLON> ) #Stmt
    |   outputStmt() <SEMICOLON>
    |   assignment() <SEMICOLON>
    |   placeStmt() <SEMICOLON>
    |   inputStmt() <SEMICOLON>
    |   conditionalStmt()
}

void placeStmt() #Place : {}
{
    <PLACE> identifier()
}

ASTPosition position() #Position : {}
{
    <LPAREN> ( number() | identifier() ) <COMMA> ( number() | identifier() ) <RPAREN>
    { return jjtThis; }
}

void boardDeclaration() #Board : {}
{
    <BOARD_DECL> position()
}

ASTPosList positionList() #PosList : {}
{
    position() ( <COMMA> position() )*
    { return jjtThis; }
}

ASTPiece pieceDeclaration() #Piece : {
    HashMap<String, Node> props = new LinkedHashMap<String, Node>();
}
{
    <PIECE_DECL> identifier()
    (
        { Node k, v; }
        k=identifier() <COLON> ( v=number() | v=stringLiteral() | v=positionList() | v=bool() )
        {
            props.put((String) k.jjtGetValue(), v);
            jjtThis.jjtSetValue(props);
        }
    )*
    <END>
    { jjtThis.jjtSetValue(props); return jjtThis; }
}

void assignment() #Assign : {}
{
    identifier() <ASSIGN> expression()
}

void expression() #Expr(>1) : {}
{
    LOOKAHEAD(boolExpr() logicalOperator())
        boolExpr() ( logicalOperator() boolExpr() )+
    |   boolExpr()
}

void addExpr() #Expr(>1) : {}
{
    LOOKAHEAD(multiplicativeExpr() additiveOperator())
        multiplicativeExpr() ( additiveOperator() multiplicativeExpr() )+
    |   multiplicativeExpr()
}

void boolExpr() #Expr(>1) : {}
{
    LOOKAHEAD(addExpr() booleanOperator())
        addExpr() ( booleanOperator() addExpr() )+
    |   addExpr()
}

ASTOperator additiveOperator() #Operator : { Token t; }
{
    ( t=<PLUS> | t=<MINUS> )
    {
        jjtThis.jjtSetValue(t.image);
        return jjtThis;
    }
}

ASTOperator logicalOperator() #Operator : { Token t; }
{
    ( t=<OR> | t=<AND> )
    {
        jjtThis.jjtSetValue(t.image);
        return jjtThis;
    }
}

void multiplicativeExpr() #Expr(>1) : {}
{
    LOOKAHEAD(unary() multiplicativeOperator())
        unary() ( multiplicativeOperator() unary() )+
    |   unary()
}

ASTOperator multiplicativeOperator() #Operator : { Token t; }
{
    (t=<MULT> | t=<DIV> | t=<MOD>)
    {
        jjtThis.jjtSetValue(t.image);
        return jjtThis;
    }
}

void unary() : {}
{
        <LPAREN> expression() <RPAREN>
    |   isTileEmpty()
    |   tileAccess()
    |   primary()
    |   (<NOT> unary()) #BoolNot
}

void primary() : {}
{
        LOOKAHEAD( functionCall() )
        functionCall()
    |   ( LOOKAHEAD(2) getPiece() | identifier() )
    |   number()
    |   bool()
    |   stringLiteral()
}

ASTOperator booleanOperator() #Operator : { Token t; }
{
    (  t=<EQ>
    |  t=<NEQ>
    |  t=<LEQ>
    |  t=<GEQ>
    |  t=<LT>
    |  t=<GT> )
    {
        jjtThis.jjtSetValue(t.image);
        return jjtThis;
    }
}

ASTIdent identifier() #Ident : { Token t; }
{
    t=<IDENT>
    {
        jjtThis.jjtSetValue(t.image);
        return jjtThis;
    }
}

ASTInteger number() #Integer : { Token t; }
{
    ( t=<NUM> | t=<NEG_NUM> )
    {
        jjtThis.jjtSetValue(Integer.parseInt(t.image));
        return jjtThis;
    }
}

ASTBoolean bool() #Boolean : { Token t; }
{
    t=<BOOL>
    {
        jjtThis.jjtSetValue(t.image);
        return jjtThis;
    }
}

ASTString stringLiteral() #String : { Token t; }
{
    t=<STRING>
    {
        jjtThis.jjtSetValue(t.image.substring(1, (t.image.length() - 1)));
        return jjtThis;
    }
}

void outputStmt() #Output : {}
{
    <OUTPUT> expression()
}

void inputStmt() #Input : {}
{
    <INPUT> expression()
}

void conditionalStmt() #CondStmt : {}
{
    <IF> expression()
    ( gameStmt() )+
    ( <END> | elseBlock() )
}

void elseBlock() #CondElse : {}
{
        LOOKAHEAD(<ELSE> <IF>)
        <ELSE> conditionalStmt()
    |   <ELSE> ( gameStmt() )+ <END>
}

void functionDeclaration() #FuncDecl : {}
{
    <FUNC_DECL> identifier() argumentList()
    functionBody()
    <RETURN> expression()
}

void argumentList() #ArgList : {}
{
        LOOKAHEAD( <LPAREN> <RPAREN> )
        <LPAREN> <RPAREN>
    |   <LPAREN> identifier() ( <COMMA> identifier() )* <RPAREN>
}

void functionBody() #FuncBody : {}
{
    ( gameStmt() )*
}

void functionCall() #FuncCall : {}
{
    identifier() argumentList()
}

void tileAccess() #Tile : {}
{
    <TILE> position()
}

void getPiece() #GetPiece : {}
{
    identifier() <FROM> identifier()
}

void isTileEmpty() #TileEmpty : {}
{
    <IS_EMPTY> position()
}