# noughts_and_crosses.griddy
board (3,3);

# Piece definition
piece XO end

# Function to act as a win condition:
fun check_win ()
    win_cond = false;

    # Check all possible winning patterns:
    if !empty? (2,2) and (
            tile (1,1) == tile (2,2) and tile (3,3) == tile (2,2) or    # a1 - b2 - c3
            tile (2,1) == tile (2,2) and tile (2,3) == tile (2,2) or    # b1 - b2 - b3
            tile (3,1) == tile (2,2) and tile (1,3) == tile (2,2) or    # c1 - b2 - a3
            tile (1,2) == tile (2,2) and tile (3,2) == tile (2,2) )     # a2 - b2 - c2
        or !empty? (1,2) and ( tile (1,1) == tile (1,2) and tile (1,3) == tile (1,1) )  # a1 - a2 - a3
        or !empty? (3,2) and ( tile (3,1) == tile (3,2) and tile (3,3) == tile (3,2) )  # c1 - c2 - c3
        or !empty? (2,1) and ( tile (1,1) == tile (2,1) and tile (3,1) == tile (2,1) )  # a1 - b1 - c1
        or !empty? (2,3) and ( tile (1,3) == tile (2,3) and tile (3,3) == tile (2,3) )  # a3 - b3 - c3
        win_cond = true;
    end

    # Print final board and display winner if win condition is met:
    if win_cond and @current_player == @player_one
        output @board;
        output "Winner: Player 1";
    else if win_cond and @current_player == @player_two
        output @board;
        output "Winner: Player 2";
    end

    # End game with no winner if all tiles have been filled without a player having 3-in-a-row:
    if (!empty? (1,1) and !empty? (2,1) and !empty? (3,1) and
        !empty? (1,2) and !empty? (2,2) and !empty? (3,2) and
        !empty? (1,3) and !empty? (2,3) and !empty? (3,3))
        win_cond = true;
        output "Draw!";
    end
return win_cond

GAME ( check_win() )
    # Print the updated board at the start of each turn:
    output @board;

    # Announce the player who's turn it currently is:
    if @current_player == @player_one
        output "It is Player 1's turn";
    else
        output "It is Player 2's turn";
    end

    # Get user input and place piece on board:
    place XO;
