import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

import com.company.*;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

public class VisitorTest {
    String outHeader = """
            /* === Code generated by Griddy compiler === */
            #include <stdio.h>
            #include <stdlib.h>
            #include <string.h>
            #include <stdbool.h>
            
            int main(int argc, char *argv[]){
            struct Piece {
            char* name;
            unsigned int limit;
            unsigned int count;
            bool placeable;
            bool capture;
            bool can_jump;
            struct Player* player;
            };
            """,
            setupHeader = "/*    SETUP    */\n",
            gameHeader = "/*   GAME    */\n";

    String gameLoop(String body) {
        return """
                do {
                _current_player = _turn_count % 2 ? &_p2 : &_p1;
                """
                + body
                + """
                _turn_count++;
                } while (!_win_condition);
                
                return 0;
                }
                """;
    }

    @Test
    void variableAssignment() {
        var input = """
                board(1,1);
                a = 42;
                GAME(false)
                """;
        var expected =
                outHeader
                + setupHeader
                + """
                struct Player {
                } _p1, _p2;
                struct Piece *_board[1][1] = {{NULL,},};
                struct Player * _current_player;
                int _turn_count = 0;
                int _win_condition = 0;
                int a = 42;
                
                """
                + gameHeader
                + gameLoop("_win_condition = 0;\n");

        var output = new StringBuilder();
        InputStream inputStream = new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8));
        Griddy.main(false, inputStream, output);

        assertEquals(expected, output.toString());
    }

    @Test
    void variableReassignment() {
        var input = """
                board(1,1);
                a = 42;
                a = 21;
                GAME(false)
                """;
        var expected =
                outHeader
                + setupHeader
                + """
                struct Player {
                } _p1, _p2;
                struct Piece *_board[1][1] = {{NULL,},};
                struct Player * _current_player;
                int _turn_count = 0;
                int _win_condition = 0;
                int a = 42;
                a = 21;
                
                """
                + gameHeader
                + gameLoop("_win_condition = 0;\n");

        var output = new StringBuilder();
        InputStream inputStream = new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8));
        Griddy.main(false, inputStream, output);

        assertEquals(expected, output.toString());
    }

    @Test
    void pieceDeclaration() {
        var input = """
                board(2,2);
                piece p
                    start_position: (1,1), (2,1)
                end
                GAME(false)
                """;
        var expected =
                outHeader
                + setupHeader
                + """
                struct Player {
                struct Piece p;
                } _p1, _p2;
                _p1.p.name = calloc(2, sizeof(char));
                strcpy(_p1.p.name, "p");
                _p1.p.limit = 2147483647;
                _p1.p.count = 2;
                _p1.p.capture = 0;
                _p1.p.can_jump = 0;
                _p1.p.placeable = 1;
                _p1.p.player = &_p1;
                _p2.p.name = calloc(2, sizeof(char));
                strcpy(_p2.p.name, "p");
                _p2.p.limit = 2147483647;
                _p2.p.count = 2;
                _p2.p.capture = 0;
                _p2.p.can_jump = 0;
                _p2.p.placeable = 1;
                _p2.p.player = &_p2;
                struct Piece *_board[2][2] = {{&_p1.p,&_p1.p,},{&_p2.p,&_p2.p,},};
                struct Player * _current_player;
                int _turn_count = 0;
                int _win_condition = 0;
                
                """
                + gameHeader
                + gameLoop("_win_condition = 0;\n");

        var output = new StringBuilder();
        InputStream inputStream = new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8));
        Griddy.main(false, inputStream, output);

        assertEquals(expected, output.toString());
    }
}